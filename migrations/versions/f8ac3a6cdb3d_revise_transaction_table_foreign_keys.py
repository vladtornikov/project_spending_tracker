"""Revise transaction table foreign keys

Revision ID: f8ac3a6cdb3d
Revises: 370b2cd1b856
Create Date: 2025-08-24 17:43:08.845719

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "f8ac3a6cdb3d"
down_revision: Union[str, Sequence[str], None] = "370b2cd1b856"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    bind = op.get_bind()

    # 0) общий enum-тип для обеих таблиц
    tx_enum = sa.Enum('debit', 'credit', name='category_transaction_enum')
    tx_enum.create(bind, checkfirst=True)

    # 1) categories.category_type -> общий тип
    op.alter_column(
        'categories', 'category_type',
        existing_type=postgresql.ENUM('debit', 'credit', name='categorytypeenum'),
        type_=tx_enum,
        postgresql_using="category_type::text::category_transaction_enum",
        existing_nullable=False,
    )

    op.create_unique_constraint(
        None, "categories", ["category_id", "category_type"]
    )
    op.create_unique_constraint(None, "categories", ["category_id", "user_id"])
    op.create_unique_constraint(None, "categories", ["user_id", "title"])
    op.drop_constraint(
        op.f("categories_user_id_fkey"), "categories", type_="foreignkey"
    )
    op.create_foreign_key(
        None,
        "categories",
        "users",
        ["user_id"],
        ["id"],
        onupdate="CASCADE",
        ondelete="RESTRICT",
    )

    op.alter_column(
        'transactions', 'transaction_type',
        existing_type=postgresql.ENUM('debit', 'credit', name='transactiontypeenum'),
        type_=tx_enum,
        postgresql_using="transaction_type::text::category_transaction_enum",
        existing_nullable=False,
    )

    op.alter_column(
        "transactions",
        "other_data",
        existing_type=postgresql.JSON(astext_type=sa.Text()),
        type_=postgresql.JSONB(astext_type=sa.Text()),
        existing_nullable=True,
    )
    op.alter_column(
        "transactions", "category_id", existing_type=sa.UUID(), nullable=False
    )
    op.alter_column(
        "transactions", "user_id", existing_type=sa.INTEGER(), nullable=False
    )
    op.drop_constraint(
        op.f("transactions_category_id_fkey"),
        "transactions",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("transactions_user_id_fkey"), "transactions", type_="foreignkey"
    )
    op.create_foreign_key(
        None,
        "transactions",
        "categories",
        ["category_id", "transaction_type"],
        ["category_id", "category_type"],
        onupdate="CASCADE",
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        None,
        "transactions",
        "users",
        ["user_id"],
        ["id"],
        onupdate="CASCADE",
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        None,
        "transactions",
        "categories",
        ["category_id", "user_id"],
        ["category_id", "user_id"],
        onupdate="CASCADE",
        ondelete="RESTRICT",
    )
    op.create_check_constraint('ck_tx_amount_non_negative', 'transactions', 'amount >= 0')

    # 3) (опционально) убрать старые enum-типы, если больше нигде не используются
    op.execute("DROP TYPE IF EXISTS transactiontypeenum")
    op.execute("DROP TYPE IF EXISTS categorytypeenum")

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "transactions", type_="foreignkey")
    op.drop_constraint(None, "transactions", type_="foreignkey")
    op.drop_constraint(None, "transactions", type_="foreignkey")
    op.create_foreign_key(
        op.f("transactions_user_id_fkey"),
        "transactions",
        "users",
        ["user_id"],
        ["id"],
        onupdate="CASCADE",
        ondelete="SET NULL",
    )
    op.create_foreign_key(
        op.f("transactions_category_id_fkey"),
        "transactions",
        "categories",
        ["category_id"],
        ["category_id"],
        onupdate="CASCADE",
        ondelete="SET NULL",
    )
    op.alter_column(
        "transactions", "user_id", existing_type=sa.INTEGER(), nullable=True
    )
    op.alter_column(
        "transactions", "category_id", existing_type=sa.UUID(), nullable=True
    )
    op.alter_column(
        "transactions",
        "other_data",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=postgresql.JSON(astext_type=sa.Text()),
        existing_nullable=True,
    )
    op.alter_column(
        "transactions",
        "transaction_type",
        existing_type=postgresql.ENUM(
            "debit",
            "credit",
            name="category_transaction_enum",
            inherit_schema=True,
        ),
        type_=postgresql.ENUM("debit", "credit", name="transactiontypeenum"),
        existing_nullable=False,
    )
    op.drop_constraint(None, "categories", type_="foreignkey")
    op.create_foreign_key(
        op.f("categories_user_id_fkey"),
        "categories",
        "users",
        ["user_id"],
        ["id"],
    )
    op.drop_constraint(None, "categories", type_="unique")
    op.drop_constraint(None, "categories", type_="unique")
    op.drop_constraint(None, "categories", type_="unique")
    op.alter_column(
        "categories",
        "category_type",
        existing_type=postgresql.ENUM(
            "debit",
            "credit",
            name="category_transaction_enum",
            inherit_schema=True,
        ),
        type_=postgresql.ENUM("debit", "credit", name="categorytypeenum"),
        existing_nullable=False,
    )
    # ### end Alembic commands ###
